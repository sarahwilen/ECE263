# -*- coding: utf-8 -*-
"""CoherenceLDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SwAv6-WqHiVQvsBj4oNCSKYf_zx7NWAj
"""

import re
import numpy as np
import pandas as pd
from pprint import pprint

import gensim
import gensim.corpora as corpora
from gensim.models import CoherenceModel
from gensim.utils import simple_preprocess
from gensim.models.ldamodel import LdaModel

import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords

def preprocess_data(documents):
 stop_words = stopwords.words('english')

 # Tokenize and remove stopwords
 texts = [[word for word in simple_preprocess(str(doc)) if word not in stop_words] for doc in documents]

 return texts

from google.colab import drive
drive.mount("/content/drive")

df_topics = pd.read_csv('https://docs.google.com/spreadsheets/d/1Ya2q9Ao1J4nQoifs5pWVoDyjZ4G970bAiFCW0D87nYA/export?format=csv', usecols=['Practice Area','Question','LLM #1: ChatGPT Generation','LLM #2: Claude Generation'])
df_topics = df_topics[:67]

documents = df_topics['Question'].values.tolist()
processed_texts = preprocess_data(documents)

# Create Dictionary
id2word = corpora.Dictionary(processed_texts)
# Create Corpus
texts = processed_texts
# Term Document Frequency
corpus = [id2word.doc2bow(text) for text in texts]

# Set number of topics
num_topics = 4

# Build LDA model
lda_model = LdaModel(corpus=corpus, id2word=id2word, num_topics=num_topics, random_state=42, passes=10, alpha='auto', per_word_topics=True)

# Print the keywords for each topic
pprint(lda_model.print_topics())

# 'LLM #1: ChatGPT Generation','LLM #2: Claude Generation'
# documents = df_topics['LLM #1: ChatGPT Generation'].values.tolist()
documents = df_topics['LLM #2: Claude Generation'].values.tolist()
processed_texts = preprocess_data(documents)

print(processed_texts[1])

coherence_model_lda = CoherenceModel(model=lda_model, texts=processed_texts, dictionary=id2word, coherence='c_v')
coherence_lda = coherence_model_lda.get_coherence()
print('Coherence Score: ', coherence_lda)

def calculate_coherence_score(docs):
    # Preprocess documents
    processed_texts = preprocess_data(docs)

    # Create Dictionary
    id2word = corpora.Dictionary(processed_texts)
    # Create Corpus
    texts = processed_texts
    # Term Document Frequency
    corpus = [id2word.doc2bow(text) for text in texts]

    # Set number of topics
    num_topics = 15

    # Build LDA model
    lda_model = LdaModel(corpus=corpus, id2word=id2word, num_topics=num_topics, random_state=42, passes=10, alpha='auto', per_word_topics=True)

    # this creates a list of the token ids (in the format of integers) of the words in words that are also present in the
    # dictionary created from the preprocessed text. The topic_words list contains list of token ids for each
    # topic.
    coherence_model = CoherenceModel(model=lda_model, texts=processed_texts, dictionary=id2word, coherence='c_v')
    coherence = coherence_model.get_coherence()

    return coherence

# generate documents separate by practice area
df_google_sheet = pd.read_csv('https://docs.google.com/spreadsheets/d/1Ya2q9Ao1J4nQoifs5pWVoDyjZ4G970bAiFCW0D87nYA/export?format=csv', usecols=['Question', 'Practice Area','LLM #1: ChatGPT Generation','LLM #2: Claude Generation'])
df_google_sheet = df_google_sheet[:67]
gpt_doc = df_google_sheet['LLM #1: ChatGPT Generation'].values.tolist()
# gpt_doc = df_google_sheet['LLM #1: ChatGPT Generation'].apply(clean)
claude_doc = df_google_sheet['LLM #2: Claude Generation'].values.tolist()
civ_gpt = []
emp_gpt = []
ipr_gpt = []
cri_gpt = []
civ_claude = []
emp_claude = []
ipr_claude = []
cri_claude = []
for index, row in df_google_sheet.iterrows():
  pracArea = row['Practice Area']
  if pracArea == 'Civil':
    civ_gpt.append(row['LLM #1: ChatGPT Generation'])
    civ_claude.append(row['LLM #2: Claude Generation'])
  elif pracArea == 'Employment':
    emp_gpt.append(row['LLM #1: ChatGPT Generation'])
    emp_claude.append(row['LLM #2: Claude Generation'])
  elif pracArea == 'Intellectual Property':
    ipr_gpt.append(row['LLM #1: ChatGPT Generation'])
    ipr_claude.append(row['LLM #2: Claude Generation'])
  elif pracArea == 'Criminal':
    cri_gpt.append(row['LLM #1: ChatGPT Generation'])
    cri_claude.append(row['LLM #2: Claude Generation'])

# topicModel = lda_model

# gpt scores
print("GPT Topic Coherence")
print("GPT Total",calculate_coherence_score(gpt_doc))
print("GPT Civil",calculate_coherence_score(civ_gpt))
print("GPT Employment",calculate_coherence_score(emp_gpt))
print("GPT Intellectual Property",calculate_coherence_score(ipr_gpt))
print("GPT Criminal",calculate_coherence_score(cri_gpt))

# claude scores
print("Claude Topic Coherence")
print("Claude Total",calculate_coherence_score(claude_doc))
print("Claude Civil",calculate_coherence_score(civ_claude))
print("Claude Employment",calculate_coherence_score(emp_claude))
print("Claude Intellectual Property",calculate_coherence_score(ipr_claude))
print("Claude Criminal",calculate_coherence_score(cri_claude))

print(calculate_coherence_score(["It sounds like you're describing a legal situation involving a demurrer and an amended complaint, potentially related to civil litigation. Here's a breakdown of the situation: 1. **First Demurrer and Amended Complaint**: The court heard the defendant's first demurrer (a legal pleading challenging the legal sufficiency of a complaint) and granted leave to the plaintiff to file an amended complaint. Subsequently, the plaintiff served an amended complaint on the defendant. 2. **Complications with Responding**: The defendant is encountering difficulties in responding to the amended complaint. It seems there are procedural hurdles preventing the defendant from proposing an answer, conferencing on a second demurrer, entering additional motions, or answering the amended complaint because it is frozen by the clerk. 3. **Potential Consequences**: The defendant anticipates potential consequences from the court, such as a tentative ruling on the plaintiff's motion for sanctions. If the first demurrer is rescheduled, the defendant expects the court to provide a proper reason. Additionally, if the scheduling of the second demurrer was premature, the defendant suggests the court should strike it from the record of actions (ROA). 4. **Current Status**: As of now, it appears that none of the anticipated actions by the court have been taken. In such a situation, legal minds may have various interpretations and perspectives on the procedural complexities and potential consequences. Some may suggest exploring avenues to resolve the procedural issues with the court, such as seeking clarification on the frozen status of the amended complaint or requesting a hearing to address the scheduling of the second demurrer. Others may advise closely following the procedural rules and deadlines set by the court while preparing a robust defense strategy. Ultimately, seeking guidance from a legal professional familiar with civil procedure and litigation strategy would be advisable to navigate the complexities of the situation effectively."]))